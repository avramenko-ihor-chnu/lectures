#+TITLE: JavaScript Async/Await, Promises, Fetch and REST API
#+DATE:<2025-05-16 Fri>

* Async/Await in JS, Promises, Fetch and working with REST API

** 1. Promises
Promises in JS - encapsulation of task execution;
Has two methods - method to process result of promise and method to process error;

#+BEGIN_SRC js :results
const myNewPromise = new Promise((resolve, reject) => {
    let returnObject = {
        userName: "Bohdan",
        role: "Admin",
        isActive: true,
        age: 20
    }

    let errorMessage = {
        message: "Incorrect password"
    }
    setTimeout(() => {
        resolve(returnObject) },
        1000)
});
#+END_SRC

#+RESULTS:

** Promise Handling
#+BEGIN_SRC js :results output
const myNewPromise = new Promise((resolve, reject) => {
    let returnObject = {
        userName: "Bohdan",
        role: "Admin",
        isActive: true,
        age: 20
    }

    let errorMessage = {
        message: "Incorrect password"
    }
    setTimeout(() => {
        resolve(returnObject) },
        1000)
});
myNewPromise.then((data) => {
    if(data.role === "Admin"){
        console.log("You are overlord of this server");
    }
    console.log(data);
    return true;
}).catch((error) => {
    console.error(error.message);
});
#+END_SRC

#+begin_src bash
You are overlord of this server
{ userName: 'Bohdan', role: 'Admin', isActive: true, age: 20 }
#+end_src

** Chaining of Promises
#+BEGIN_SRC js :results output
const myNewPromise = new Promise((resolve, reject) => {
    let returnObject = {
        userName: "Bohdan",
        role: "Admin",
        isActive: true,
        age: 20
    }

    let errorMessage = {
        message: "Incorrect password"
    }
    setTimeout(() => {
        resolve(returnObject) },
        1000)
});
myNewPromise.then((data) => {
    if(data.role === "Admin"){
        console.log("You are overlord of this server");
    }
    console.log(data);
    let userData = {
        user: data,
        email: data.userName + "@chnu.edu.ua"
    }
    return userData;
}).then((emailData) => {
    console.log(emailData.email)
    return true;
})
.catch((error) => {
    console.error(error.message);
});
#+END_SRC

#+begin_src bash
You are overlord of this server
{ userName: 'Bohdan', role: 'Admin', isActive: true, age: 20 }
Bohdan@chnu.edu.ua
#+end_src

** 2. Async/Await
#+BEGIN_SRC js :results output
async function someWork(ms) {
    return new Promise(resolve => setTimeout(resolve, ms))
}

async function asyncTasksExecution(){
    console.log('first call to backend:')
    await someWork(2000);

    console.log('second call to backend:')
    await someWork(1000);

    console.log('third call to backend:')
    await someWork(1000);
}

asyncTasksExecution();
#+END_SRC

#+RESULTS:
first call to backend:
second call to backend:
third call to backend:

** 3. Fetch, REST API, Requests to Backend
=fetch= - built in function in =JS= for making =HTTP= requests. =Fetch= always returns a promise.
=REST= - Representational State Transfer, standard for HTTP communication (client-server, microservices)
(GraphQL)
REST (verbs): GET, POST, PUT, PATCH, DELETE, OPTIONS

** Fetch Example
#+BEGIN_SRC js :results output
async function getDataFromStudentBackend(){
    fetch('https://chnu-student-interview-preparation.netlify.app/.netlify/functions/listItems')
    .then((response) => {
        console.log(response);
    }).catch((error) => { console.error(error); })
}

getDataFromStudentBackend();
#+END_SRC
#+begin_src bash
Response {
  status: 200,
  statusText: 'OK',
  headers: Headers {
    'access-control-allow-headers': 'Content-Type',
    'access-control-allow-methods': 'GET, POST, PUT, DELETE, OPTIONS',
    'access-control-allow-origin': '*',
    age: '1',
    'cache-control': 'no-cache',
    'cache-status': '"Netlify Durable"; fwd=bypass, "Netlify Edge"; fwd=miss',
    'content-encoding': 'br',
    'content-type': 'text/plain; charset=utf-8',
    date: 'Mon, 19 May 2025 06:08:36 GMT',
    'netlify-vary': 'query',
    server: 'Netlify',
    'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
    vary: 'Accept-Encoding',
    'x-nf-request-id': '01JVKJH2E82SQ98GHS552YC31K',
    'transfer-encoding': 'chunked'
  },
  body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true },
  bodyUsed: false,
  ok: true,
  redirected: false,
  type: 'basic',
  url: 'https://chnu-student-interview-preparation.netlify.app/.netlify/functions/listItems'
}
#+end_src

** Authentication and Authorization Flow
#+BEGIN_SRC js :results output
let token = "";
let role = "";

async function addItem(){
    let payload = {
        category: "teeth",
        description: "golden teeth",
        price: 100
    }

    let response = await fetch('https://chnu-student-interview-preparation.netlify.app/.netlify/functions/userCreateItem', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(payload)
    });

    if(!response.ok){
        console.error(response);
    }

    let data = await response.json();
    console.log(data);
}

async function requestBackend(){
    let payload = {
        username: "va.m",
        password: "pass1234"
    }

    let response = await fetch('https://chnu-student-interview-preparation.netlify.app/.netlify/functions/userLogin', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(payload)
    });

    if(!response.ok){
        console.error(response);
    }

    let data = await response.json();
    token = data.token;
    role = data.role;
    console.log(`role: ${role}`);

    if(role === "admin"){
        await addItem();
    }
}

requestBackend();
#+END_SRC

#+begin_src bash
role: admin
{ id: '682acad501ec4045e88cff7d' }
#+end_src
